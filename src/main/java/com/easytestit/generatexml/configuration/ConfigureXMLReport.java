package com.easytestit.generatexml.configuration;

import com.easytestit.generatexml.GenerateXMLReportException;

import java.io.File;

/**
 * {@link ConfigureXMLReport} is the main configuration class for Generate-XML library. You can
 * configure the work of functionality by a few ways.
 *
 * <p>For example, you only need to generate aggregated Junit's XML report file from all
 * JSON files which were generated by the testing framework. For this goal you only need to pass
 * 2 parameters when you create object of {@link ConfigureXMLReport()} class.
 *
 * <p>
 *     {@code
 *     ConfigureXMLReport conf = new ConfigureXMLReport("out/xml-report/", "TestProject");
 *     }
 * </p>
 * Where:
 * -- the first parameter is a path to JSON files that will be converted
 * to Java object and will be aggregated to one XML file.
 * -- the second parameter is the name of the project, an aggregated file
 * will be created under this name. Also, if you will use functionality of sending report
 * to report server then the report itself will be displayed under this name.
 *  </p>
 *
 * <p>In additional, if you want to use functionality of sending report you only need pass
 * 2 additional parameters in constructor of {@link ConfigureXMLReport()} class.
 *
 * <p>
 *     {@code
 *     ConfigureXMLReport conf = new ConfigureXMLReport("out/xml-report/", "TestProject", true, true);
 *     }
 * </p>
 * Where additional boolean parameters are:
 * -- the first parameter turn on functionality for creating a zip archive,
 * which is subsequently necessary for sending to the server report.
 * -- the second parameter turn on the functionality to send the previously created zip file
 * to the report server.
 * </p>
 */
public class ConfigureXMLReport {

    private final String projectName;
    private final File source;
    private final boolean reportAsZip;
    private final boolean sendReport;

    /**
     * Configuration by default (no zip, no report)
     *
     * @param path path to source folder
     * @param projectName project name
     */
    public ConfigureXMLReport(final String path, final String projectName) {
        if (path != null) {
            this.source = new File(path);
        } else {
            throw new GenerateXMLReportException("Argument path should not be null but is null. See detailed stack trace: ", new NullPointerException());
        }
        if (projectName != null) {
            this.projectName = projectName.replaceAll("\\s+", "");
        } else {
            throw new GenerateXMLReportException("Argument projectName should not be null but is null. See detailed stack trace: ", new NullPointerException());
        }
        this.reportAsZip = false;
        this.sendReport = false;
    }

    /**
     * Full configuration
     *
     * @param path path to source folder
     * @param projectName project name
     * @param reportAsZip report as zip
     * @param sendReport send report to report portal
     */
    public ConfigureXMLReport(
            final String path,
            final String projectName,
            final boolean reportAsZip,
            final boolean sendReport
    ) {
        if (path != null) {
            this.source = new File(path);
        } else {
            throw new GenerateXMLReportException("Argument path should not be null but is null. See detailed stack trace: ", new NullPointerException());
        }
        if (projectName != null) {
            this.projectName = projectName.replaceAll("\\s+", "");
        } else {
            throw new GenerateXMLReportException("Argument projectName should not be null but is null. See detailed stack trace: ", new NullPointerException());
        }
        this.reportAsZip = reportAsZip;
        this.sendReport = sendReport;
    }

    public String getProjectName() {
        return projectName;
    }

    public File getSource() {
        return source;
    }

    public boolean isReportAsZip() {
        return reportAsZip;
    }

    public boolean isSendReport() {
        return sendReport;
    }
}
